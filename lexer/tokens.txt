Token(VAR, var)
Token(IDENTIFIER, factorial)
Token(ASSIGN, :=)
Token(FUNCTION, func)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(RPAREN, ))
Token(EQUAL, =)
Token(GREATER, >)
Token(LBRACE, {)
Token(IF, if)
Token(IDENTIFIER, n)
Token(LESS_EQUAL, <=)
Token(REAL_LITERAL, 1)
Token(THEN, then)
Token(RETURN, return)
Token(REAL_LITERAL, 1)
Token(SEMICOLON, ;)
Token(ELSE, else)
Token(RETURN, return)
Token(IDENTIFIER, n)
Token(MULTIPLY, *)
Token(IDENTIFIER, factorial)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(MINUS, -)
Token(REAL_LITERAL, 1)
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(END, end)
Token(SEMICOLON, ;)
Token(RBRACE, })
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, is_prime)
Token(ASSIGN, :=)
Token(FUNCTION, func)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(RPAREN, ))
Token(EQUAL, =)
Token(GREATER, >)
Token(LBRACE, {)
Token(IF, if)
Token(IDENTIFIER, n)
Token(LESS_EQUAL, <=)
Token(REAL_LITERAL, 1)
Token(THEN, then)
Token(RETURN, return)
Token(IDENTIFIER, false)
Token(SEMICOLON, ;)
Token(END, end)
Token(SEMICOLON, ;)
Token(FOR, for)
Token(IDENTIFIER, i)
Token(IN, in)
Token(REAL_LITERAL, 2)
Token(RANGE, ..)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(MINUS, -)
Token(REAL_LITERAL, 1)
Token(RPAREN, ))
Token(LOOP, loop)
Token(IF, if)
Token(IDENTIFIER, n)
Token(DIVIDE, /)
Token(IDENTIFIER, i)
Token(MULTIPLY, *)
Token(IDENTIFIER, i)
Token(EQUAL, =)
Token(EQUAL, =)
Token(IDENTIFIER, n)
Token(THEN, then)
Token(RETURN, return)
Token(IDENTIFIER, false)
Token(SEMICOLON, ;)
Token(END, end)
Token(SEMICOLON, ;)
Token(RETURN, return)
Token(IDENTIFIER, true)
Token(SEMICOLON, ;)
Token(RBRACE, })
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, create_tuple)
Token(ASSIGN, :=)
Token(FUNCTION, func)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(RPAREN, ))
Token(EQUAL, =)
Token(GREATER, >)
Token(LBRACE, {)
Token(RETURN, return)
Token(LBRACE, {)
Token(IDENTIFIER, num)
Token(ASSIGN, :=)
Token(IDENTIFIER, n)
Token(COMMA, ,)
Token(IDENTIFIER, fact)
Token(ASSIGN, :=)
Token(IDENTIFIER, factorial)
Token(LPAREN, ()
Token(IDENTIFIER, n)
Token(RPAREN, ))
Token(COMMA, ,)
Token(IDENTIFIER, prime_check)
Token(ASSIGN, :=)
Token(FUNCTION, func)
Token(LPAREN, ()
Token(IDENTIFIER, x)
Token(RPAREN, ))
Token(EQUAL, =)
Token(GREATER, >)
Token(IDENTIFIER, is_prime)
Token(LPAREN, ()
Token(IDENTIFIER, x)
Token(RPAREN, ))
Token(RBRACE, })
Token(SEMICOLON, ;)
Token(RBRACE, })
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, main)
Token(ASSIGN, :=)
Token(FUNCTION, func)
Token(LPAREN, ()
Token(RPAREN, ))
Token(EQUAL, =)
Token(GREATER, >)
Token(LBRACE, {)
Token(VAR, var)
Token(IDENTIFIER, num)
Token(ASSIGN, :=)
Token(REAL_LITERAL, 5)
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, my_tuple)
Token(ASSIGN, :=)
Token(IDENTIFIER, create_tuple)
Token(LPAREN, ()
Token(IDENTIFIER, num)
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(PRINT, print)
Token(STRING_LITERAL, Number: )
Token(PLUS, +)
Token(IDENTIFIER, my_tuple)
Token(DOT, .)
Token(IDENTIFIER, num)
Token(SEMICOLON, ;)
Token(PRINT, print)
Token(STRING_LITERAL, Factorial: )
Token(PLUS, +)
Token(IDENTIFIER, my_tuple)
Token(DOT, .)
Token(IDENTIFIER, fact)
Token(SEMICOLON, ;)
Token(PRINT, print)
Token(STRING_LITERAL, Is prime: )
Token(PLUS, +)
Token(IDENTIFIER, my_tuple)
Token(DOT, .)
Token(IDENTIFIER, prime_check)
Token(LPAREN, ()
Token(IDENTIFIER, my_tuple)
Token(DOT, .)
Token(IDENTIFIER, num)
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, numbers)
Token(ASSIGN, :=)
Token(LBRACKET, [)
Token(REAL_LITERAL, 1)
Token(COMMA, ,)
Token(REAL_LITERAL, 2)
Token(COMMA, ,)
Token(REAL_LITERAL, 3)
Token(COMMA, ,)
Token(REAL_LITERAL, 4)
Token(COMMA, ,)
Token(REAL_LITERAL, 5)
Token(RBRACKET, ])
Token(SEMICOLON, ;)
Token(VAR, var)
Token(IDENTIFIER, results)
Token(ASSIGN, :=)
Token(LBRACKET, [)
Token(RBRACKET, ])
Token(SEMICOLON, ;)
Token(FOR, for)
Token(IDENTIFIER, i)
Token(IN, in)
Token(IDENTIFIER, numbers)
Token(LOOP, loop)
Token(VAR, var)
Token(IDENTIFIER, tuple)
Token(ASSIGN, :=)
Token(IDENTIFIER, create_tuple)
Token(LPAREN, ()
Token(IDENTIFIER, i)
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(IDENTIFIER, results)
Token(ASSIGN, :=)
Token(IDENTIFIER, results)
Token(PLUS, +)
Token(LBRACKET, [)
Token(IDENTIFIER, tuple)
Token(RBRACKET, ])
Token(SEMICOLON, ;)
Token(END, end)
Token(SEMICOLON, ;)
Token(FOR, for)
Token(IDENTIFIER, res)
Token(IN, in)
Token(IDENTIFIER, results)
Token(LOOP, loop)
Token(PRINT, print)
Token(STRING_LITERAL, Number: )
Token(PLUS, +)
Token(IDENTIFIER, res)
Token(DOT, .)
Token(IDENTIFIER, num)
Token(SEMICOLON, ;)
Token(PRINT, print)
Token(STRING_LITERAL, Factorial: )
Token(PLUS, +)
Token(IDENTIFIER, res)
Token(DOT, .)
Token(IDENTIFIER, fact)
Token(SEMICOLON, ;)
Token(PRINT, print)
Token(STRING_LITERAL, Is prime: )
Token(PLUS, +)
Token(IDENTIFIER, res)
Token(DOT, .)
Token(IDENTIFIER, prime_check)
Token(LPAREN, ()
Token(IDENTIFIER, res)
Token(DOT, .)
Token(IDENTIFIER, num)
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(END, end)
Token(SEMICOLON, ;)
Token(RBRACE, })
Token(SEMICOLON, ;)
Token(IDENTIFIER, main)
Token(LPAREN, ()
Token(RPAREN, ))
Token(SEMICOLON, ;)
Token(EOF, )
